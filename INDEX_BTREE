CREATE TABLE tweets(
	id SERIAL PRIMARY KEY, 
	username char(50),
	text_tweet text,
	date_tweet date,
	polarity float8,
	pos_w float8,
	neu_w float8,
	neg_w float8  
);


-- ALTER TABLE tweets
-- DROP COLUMN text_tweet;
	
-- ALTER TABLE tweets
-- ADD text_tweet char(280) DEFAULT 'null tweet' CHECK(length(text_tweet)>280);


COPY tweets (username, text_tweet, date_tweet, polarity, pos_w, neu_w, neg_w)
FROM 'C:/Users/dolae/SQL_COMMAND/adobe_tweets_btree.csv' WITH (FORMAT csv);

-- copy tweets (username, text_tweet, date_tweet, polarity, pos_w, neu_w, neg_w)
-- FROM 'C:/Users/dolae/SQL_COMMAND/adobe_tweets_btree.csv' DELIMITER ',' CSV


-- DROP INDEX polarity_index;

EXPLAIN ANALYSE
Select id from tweets where (lower(username)) like '%alex%';
-- 802 ms

CREATE INDEX username_index ON tweets USING btree (lower(username));


EXPLAIN ANALYSE
Select count(*) from tweets where text_tweet ilike 'adobe%';

5188.875 ms


SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat & rat'::tsquery;
true
SELECT 'fat & cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;
false
SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat & rat');
true
SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat & rat');
false

EXPLAIN ANALYSE
SELECT text_tweet FROM tweets
WHERE to_tsvector('english', text_tweet) @@ phraseto_tsquery('english', 'adobe acrobat');
22867.858 ms


EXPLAIN ANALYSE
SELECT count(*) FROM tweets
WHERE to_tsvector('english', text_tweet) @@ plainto_tsquery('english', 'adobe acrobat');


plainto_tsquery('english', 'The Fat Rats');
plainto_tsquer



SELECT username, text_tweet FROM tweets
WHERE to_tsvector(username || ' ' || text_tweet) @@ to_tsquery('alex');

SELECT COALESCE(username) FROM tweets 

SELECT id, text_tweet FROM tweets WHERE id = 1334879;

SELECT to_tsvector('english', text_tweet) FROM tweets WHERE id = 1334879;


SELECT * FROM ts_debug('english',
  (SELECT text_tweet FROM tweets WHERE id = 192));


SELECT to_tsvector('english', text_tweet) FROM tweets WHERE id = 192;

SELECT to_tsvector('pg_catalog.russian', 'Жар-птица — сказочная птица, персонаж русских сказок,
				   обычно является целью поиска героя сказки.');

select ts_lexize('pg_catalog.simple', 'adobe');

select * from  ts_parse('default','123 - a number');


 select * from ts_token_type('default');

 
show lc_ctype
show lc_collate

show default_text_search_config

SHOW search_path

CREATE TABLE only_tweets(
	id SERIAL PRIMARY KEY, 
	username char(50),
	text_tweet text  
);
DROP TABLE only_tweets;
INSERT INTO only_tweets (username, text_tweet) SELECT username, text_tweet FROM tweets limit 10;


SELECT * FROM only_tweets;

ALTER TABLE only_tweets ADD  doc_tsv tsvector;

update only_tweets set doc_tsv = to_tsvector(text_tweet);


____________________________
create index on ts using gin(doc_tsv) with (fastupdate = true);
select doc from ts where doc_tsv @@ to_tsquery('slit:*');

	
	
ALTER TABLE news ADD  doc_tsv tsvector;

update news set doc_tsv = to_tsvector('myconf', news_text);

UPDATE news SET doc_tsv=
setweight( coalesce( to_tsvector('myconf', headline),''),'A')|| ' ' ||
setweight( coalesce( to_tsvector('myconf', news_text),''),'B');

Select * from news order by id limit 5;

select headline, news_text,ts_rank_cd(doc_tsv, q)
from news, 
to_tsquery('education & program') q 
where doc_tsv @@ q order by ts_rank_cd desc


select headline, news_text, ts_rank_cd('{0.1,1.0,0.2,0.4}', doc_tsv, q)
from news,
to_tsquery('education & program:a') q
where doc_tsv @@ q order by ts_rank_cd desc;

EXPLAIN ANALYSE
select news_text
from news, 
to_tsquery('text & news') q 
where doc_tsv @@ q 

select news_text from news
where doc_tsv @@ to_tsquery('prog:*');



create index ind_news on news using gin(doc_tsv);

select * from news;

select ctid, news_text, doc_tsv from news
order by id;

select (unnest(doc_tsv)).lexeme, count(*) from news
group by 1 order by 2 desc;



select headline, news_text from temp_news where doc_tsv @@ to_tsquery('year & program');


create index temp_ind on news
using gin(doc_tsv) with (fastupdate = true);

drop index ind_news;

SELECT * FROM ts_parse('default','Thats 79 my first own parser');


select ts_lexize('pg_catalog.english_stem', '11234567890');

select ts_lexize('pg_catalog.snowball', 'adobe');

select ts_lexize('pg_catalog.english_stem', 'XIX');



CREATE TEXT SEARCH CONFIGURATION public.myconf ( COPY = pg_catalog.english );

ALTER TEXT SEARCH CONFIGURATION myconf
ALTER MAPPING FOR asciiword, hword_asciipart,
word, hword, hword_part
WITH pg_catalog.english_stem;

ALTER TEXT SEARCH CONFIGURATION myconf
DROP MAPPING FOR email, url, url_path, sfloat, float, numword,
numhword, host, int, uint, version;


SELECT * FROM pg_indexes

DROP TEXT SEARCH CONFIGURATION public.myconf

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
ON news FOR EACH ROW EXECUTE PROCEDURE
tsvector_update_trigger(doc_tsv, 'public.myconf', news_text);

drop trigger tsvectorupdate ON news

INSERT INTO news (headline, news_text) VALUES('new title', 'a text of news');

select *
FROM news
ORDER BY id DESC;



